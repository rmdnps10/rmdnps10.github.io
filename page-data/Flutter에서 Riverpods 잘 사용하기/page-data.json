{"componentChunkName":"component---src-templates-blog-post-js","path":"/Flutter에서 Riverpods 잘 사용하기/","result":{"data":{"site":{"siteMetadata":{"title":"난너의오른팔🧑‍💻"}},"markdownRemark":{"id":"73c44f72-67a7-5c3d-a5c1-94ba77c02ae8","excerpt":"LG전자 산학 캡스톤에서 Flutter로 프로젝트를 진행하기 전 프리코스로 TODO 리스트 개발 과제가 주어졌다. 📋 요구사항 그리고 따로 README 파일을 만들어서 상태 자료구조, widget 설명, DevTools에서 Inspector&Timeline&Memory…","html":"<blockquote>\n<p>LG전자 산학 캡스톤에서 Flutter로 프로젝트를 진행하기 전 프리코스로 TODO 리스트 개발 과제가 주어졌다.</p>\n</blockquote>\n<h4>📋 요구사항</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 투두리스트 기본적인 기능 구현\n- Riverpod 상태 관리 구현\n- DevTools 사용</code></pre></div>\n<p>그리고 따로 README 파일을 만들어서 상태 자료구조, widget 설명, DevTools에서 Inspector&#x26;Timeline&#x26;Memory&#x26;Performance 화면을 스크린샷해야 한다.</p>\n<p>TODO 리스트 그냥 띡 만들어봐가 아닌 거 같아서, 나도 이에 부응해서 Flutter, Riverpod 공식문서를 살펴보면서 관련 내용을 학습하며 투두 리스트를 완성했다.\n오늘은 이 과정 속 내가 학습한 내용에 대해 다뤄보고자 한다.</p>\n<h2>1️⃣ Riverpod 핵심 개념 완전 정복</h2>\n<h4>1.1 <code class=\"language-text\">Riverpod</code>이 뭘까? 🎯</h4>\n<p>Riverpod은 Flutter에서 사용하는 <code class=\"language-text\">상태 관리 라이브러리</code>다. 쉽게 말해서 앱의 데이터를 여러 화면에서 공유하고 관리할 수 있게 해주는 도구라고 생각하면 된다.</p>\n<h5>왜 상태 관리가 필요할까?🤔</h5>\n<p>Flutter에서 기본적으로 제공하는 <code class=\"language-text\">setState()</code>는 한 화면 안에서만 데이터를 관리할 수 있다. 하지만 실제 앱을 만들다 보면:</p>\n<ul>\n<li>로그인한 사용자 정보를 여러 화면에서 사용해야 한다</li>\n<li>장바구니 데이터를 상품 목록과 결제 화면에서 공유해야 한다</li>\n<li>다크 모드 설정을 전체 앱에 적용해야 한다</li>\n</ul>\n<p>이럴 때 Riverpod이 빛을 발한다!</p>\n<h5>Riverpod의 장점</h5>\n<ul>\n<li>🔒 <strong>타입 안전성</strong>: 컴파일할 때 오류를 미리 잡아준다</li>\n<li>🧪 <strong>테스트하기 쉬움</strong>: 가짜 데이터로 테스트하기 편하다</li>\n<li>📱 <strong>DevTools 지원</strong>: 상태 변화를 눈으로 확인할 수 있다</li>\n<li>🏗️ <strong>확장성</strong>: 큰 프로젝트에서도 깔끔하게 관리된다</li>\n</ul>\n<h4>1.2 Riverpod 아키텍처 한눈에 보기 📐</h4>\n<p>Riverpod은 4가지 핵심 요소로 구성되어 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">🏪 <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">(</span>상점<span class=\"token punctuation\">)</span>         ↔️  📱 <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">(</span>고객<span class=\"token punctuation\">)</span>\n      ⬇️                       ⬆️\n🎪 <span class=\"token class-name\">ProviderScope</span>          ↔️  🔗 <span class=\"token class-name\">Ref</span> <span class=\"token punctuation\">(</span>다리<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span>쇼핑몰 관리소<span class=\"token punctuation\">)</span>              <span class=\"token punctuation\">(</span>연결고리<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>간단한 비유로 이해하기:</strong></p>\n<ul>\n<li><strong>🏪 Provider</strong>: 데이터를 파는 <strong>상점</strong></li>\n<li><strong>📱 Consumer</strong>: 데이터를 사는 <strong>고객</strong> (UI)</li>\n<li><strong>🎪 ProviderScope</strong>: 모든 상점을 관리하는 <strong>쇼핑몰</strong> (Flutter Widget용)</li>\n<li><strong>🔗 Ref</strong>: 고객과 상점을 연결하는 <strong>다리</strong> 역할</li>\n</ul>\n<blockquote>\n<p><strong>💡 참고:</strong> 실제로는 ProviderContainer가 핵심 관리 시스템이지만, Flutter 앱에서는 ProviderScope(Widget 버전)를 사용하는 것이 권장된다. Todo 앱에서도 ProviderScope를 사용했다!</p>\n</blockquote>\n<p>이제 각각을 자세히 알아보자!</p>\n<h4>1.3 🏪 Provider 핵심 개념</h4>\n<p>Provider는 <strong>데이터를 제공하는 상점</strong>이다. 앱에서 필요한 데이터를 생성하고 관리하는 역할을 한다.</p>\n<p><strong>Provider 타입별 특징:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 🎯 StateProvider - 간단한 값 하나를 관리</span>\n<span class=\"token keyword\">final</span> counterProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">StateProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🧠 NotifierProvider - 복잡한 로직이 있는 상태 관리</span>\n<span class=\"token keyword\">final</span> todoListProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">NotifierProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoNotifier</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token class-name\">TodoNotifier</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ⏰ FutureProvider - 비동기 데이터 관리</span>\n<span class=\"token keyword\">final</span> weatherProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">FutureProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Weather</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getWeather</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🔄 StreamProvider - 실시간 데이터 스트림</span>\n<span class=\"token keyword\">final</span> chatProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> chatService<span class=\"token punctuation\">.</span>messagesStream<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Provider 타입 선택 가이드:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Provider 타입</th>\n<th>사용 시기</th>\n<th>예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">StateProvider</code></td>\n<td>간단한 값 하나</td>\n<td>카운터, 다크모드 설정</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">NotifierProvider</code></td>\n<td>복잡한 비즈니스 로직</td>\n<td>Todo 리스트, 장바구니</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">FutureProvider</code></td>\n<td>API 호출 (비동기)</td>\n<td>사용자 프로필 조회</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">StreamProvider</code></td>\n<td>실시간 데이터</td>\n<td>채팅, 알림</td>\n</tr>\n</tbody>\n</table>\n<h4>1.4 🎪 ProviderScope 핵심 개념</h4>\n<p>ProviderScope는 Riverpod의 <strong>Flutter 전용 진입점</strong>이다. 모든 Provider들이 작동할 수 있는 <strong>환경을 제공</strong>하는 특별한 Widget이다.</p>\n<p><strong>Todo 앱에서 ProviderScope를 선택한 이유:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// main.dart - 앱의 시작점</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runApp</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">ProviderScope</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\">// 👈 Flutter 앱에서는 이것을 사용!</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TodoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>ProviderScope vs ProviderContainer:</strong></p>\n<ul>\n<li><strong>ProviderContainer</strong>: Riverpod의 <strong>핵심 엔진</strong> (모든 상태 관리의 중심)</li>\n<li><strong>ProviderScope</strong>: ProviderContainer의 <strong>Widget 래퍼</strong> (Flutter 앱에서 사용하기 위한 형태)</li>\n</ul>\n<p>Todo 앱에서는 Flutter Widget 트리와 자연스럽게 통합되어야 하므로 ProviderScope를 사용했다!</p>\n<h5>ProviderScope의 역할</h5>\n<ol>\n<li><strong>🏠 Provider 환경 제공</strong>: Provider들이 작동할 수 있는 컨텍스트 생성</li>\n<li><strong>🔧 테스트 지원</strong>: 특정 Provider를 가짜 구현으로 교체 가능</li>\n<li><strong>💾 자동 메모리 관리</strong>: 사용하지 않는 Provider 자동 정리</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 테스트에서 활용하는 예시</span>\n<span class=\"token function\">testWidgets</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Todo 추가 테스트'</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>tester<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> tester<span class=\"token punctuation\">.</span><span class=\"token function\">pumpWidget</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">ProviderScope</span><span class=\"token punctuation\">(</span>\n      overrides<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 실제 Provider를 테스트용으로 교체</span>\n        todoListProvider<span class=\"token punctuation\">.</span><span class=\"token function\">overrideWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">MockTodoNotifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TodoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고로 ProviderContainer를 통해서도 Provider를 통한 상태 관리를 할 수 있다.</p>\n<blockquote>\n<p>💡 이번 TODO 앱에서는 <code class=\"language-text\">ProviderScope</code> 를 사용했다. 공식 문서에 따르면 Flutter 애플리케이션에서 <code class=\"language-text\">ProviderContianer</code>를 직접적으로 사용하는 건 지양해야 한다고 한다.\n대신 다음과 같은 특수한 상황에서 유용하다고 한다:</p>\n</blockquote>\n<ul>\n<li><strong>테스트 환경</strong>: 위젯 없이 provider 로직만 테스트할 때</li>\n<li><strong>백그라운드 서비스</strong>: UI와 분리된 백그라운드 작업에서 상태 관리가 필요할 때</li>\n<li><strong>서버 사이드</strong>: Dart 서버 애플리케이션에서 Riverpod을 사용할 때</li>\n</ul>\n<h4>1.5 🔗 Ref 핵심 개념</h4>\n<p>Ref는 Provider와 Consumer를 연결하는 <strong>다리</strong> 역할을 한다. Widget에서 Provider의 데이터에 접근하거나 상태를 변경할 때 사용한다.</p>\n<h5><strong>Ref의 주요 메서드들</strong></h5>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 📡 ref.watch() - 상태 구독 (변화 감지)</span>\n    <span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 🎯 ref.read() - 일회성 접근 (변화 감지 안함)</span>\n    <span class=\"token keyword\">final</span> notifier <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 👂 ref.listen() - 상태 변화 감지해서 부수 효과 실행</span>\n    ref<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> previous<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ScaffoldMessenger</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">showSnackBar</span><span class=\"token punctuation\">(</span>\n          <span class=\"token class-name\">SnackBar</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'새 할 일이 추가되었어요!'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Column</span><span class=\"token punctuation\">(</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'할 일 </span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">todos<span class=\"token punctuation\">.</span>length</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">개'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">ElevatedButton</span><span class=\"token punctuation\">(</span>\n          onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> notifier<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'새 할 일'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'추가'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Ref의 메서드 종류</h5>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>용도</th>\n<th>리빌드 여부</th>\n<th>사용 예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">ref.watch()</code></td>\n<td>데이터 표시</td>\n<td>✅ 자동 리빌드</td>\n<td>UI에 상태 표시</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ref.read()</code></td>\n<td>데이터 변경</td>\n<td>❌ 리빌드 안함</td>\n<td>버튼 클릭시 상태 변경</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ref.listen()</code></td>\n<td>부수 효과</td>\n<td>❌ 리빌드 안함</td>\n<td>알림, 네비게이션</td>\n</tr>\n</tbody>\n</table>\n<h4>1.6 📱 Consumer Widget 핵심 개념</h4>\n<p>Consumer Widget은 Provider의 데이터를 <strong>구독</strong>하고 <strong>UI에 표시</strong>하는 특별한 위젯이다. 일반 Widget과 달리 <code class=\"language-text\">WidgetRef ref</code> 매개변수를 통해 Provider에 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// ❌ 일반 Widget - Provider 접근 불가</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NormalWidget</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// final todos = ref.watch(todoListProvider);  // 💥 에러!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Provider 접근 불가'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ✅ Consumer Widget - Provider 접근 가능!</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ✨ 가능!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'할 일 </span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">todos<span class=\"token punctuation\">.</span>length</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">개'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Todo 앱에서 Consumer Widget 활용 사례</h5>\n<p>Todo 앱에서는 주로 <code class=\"language-text\">ConsumerWidget</code>을 사용한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 1. TodoList - Todo 목록을 표시하는 Widget</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 👈 Todo 리스트 구독</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListView</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n      itemCount<span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n      itemBuilder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">TodoItem</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2. TodoItem - 개별 Todo 항목을 표시하는 Widget</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoItem</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Todo</span> todo<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token class-name\">TodoItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListTile</span><span class=\"token punctuation\">(</span>\n      leading<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Checkbox</span><span class=\"token punctuation\">(</span>\n        value<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">,</span>\n        onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      trailing<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IconButton</span><span class=\"token punctuation\">(</span>\n        icon<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Icon</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Icons</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Consumer Widget의 역할</h5>\n<ul>\n<li>📡 <code class=\"language-text\">ref.watch()</code>로 상태를 <strong>구독</strong>하면 상태 변경시 자동으로 리빌드</li>\n<li>🎯 <code class=\"language-text\">ref.read()</code>로 상태를 <strong>변경</strong>할 때는 리빌드되지 않음</li>\n<li>🔄 Todo가 추가/삭제/수정되면 TodoList와 TodoItem이 자동으로 업데이트됨</li>\n</ul>\n<h4>1.7 🔄 setState vs Riverpod 비교</h4>\n<p><strong>기존 setState 방식의 한계</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> _CounterPageState <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CounterPage</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  int count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 🚫 이 화면에서만 사용 가능</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 🚫 이 Widget만 업데이트</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>👿문제점</strong></p>\n<ul>\n<li>다른 화면에서 <code class=\"language-text\">count</code> 값을 사용할 수 없음</li>\n<li>데이터가 복잡해지면 관리가 어려움</li>\n<li>부모에서 자식으로 데이터를 전달하려면 여러 단계를 거쳐야 함</li>\n</ul>\n<h5>Riverpod 방식</h5>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 1️⃣ Provider 정의 (전역에서 접근 가능!)</span>\n<span class=\"token keyword\">final</span> counterProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">StateProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2️⃣ Consumer Widget을 통한 값 구독</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterDisplay</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> count <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>counterProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 값 구독</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">count</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3️⃣ 어디서든 값 변경 가능</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ElevatedButton</span><span class=\"token punctuation\">(</span>\n      onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>counterProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'증가'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같은 장점이 있다.</p>\n<ul>\n<li><strong>전역 접근</strong>: 어느 화면에서든 상태 사용 가능</li>\n<li><strong>자동 업데이트</strong>: 상태 변경시 모든 구독자가 자동 업데이트</li>\n<li><strong>타입 안전성</strong>: 컴파일 타임에 오류 검출</li>\n<li><strong>테스트 용이성</strong>: Provider 교체로 쉬운 테스트</li>\n</ul>\n<h4>1.8 🎯 설치 및 설정 방법</h4>\n<p><strong>패키지 설치 (권장 방법)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 메인 라이브러리 설치</span>\nflutter pub <span class=\"token function\">add</span> flutter_riverpod\n\n<span class=\"token comment\"># 개발용 도구 설치 (코드 생성용)</span>\nflutter pub <span class=\"token function\">add</span> <span class=\"token parameter variable\">--dev</span> riverpod_generator build_runner</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// main.dart</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter/material.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runApp</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">ProviderScope</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\">// 👈 필수! 앱 전체를 감싸기</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 Riverpod의 4가지 핵심 개념을 모두 알아봤다! 다음 섹션에서는 실제 Todo 앱을 만들면서 이 개념들을 적용해보자.</p>\n<h2>2️⃣ Todo 앱 만들면서 Riverpod 적용하기</h2>\n<p>이제 실제로 Todo 앱을 만들면서 앞서 학습한 Riverpod의 4가지 핵심 개념을 모두 적용해보자!</p>\n<p><strong>우리가 만들 Todo 앱의 기능:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">-</span> Todo 추가하기\n<span class=\"token operator\">-</span> Todo 완료<span class=\"token operator\">/</span>미완료 토글하기\n<span class=\"token operator\">-</span> Todo 삭제하기\n<span class=\"token operator\">-</span> 완료된 Todo 개수 표시하기</code></pre></div>\n<h4>2.1 프로젝트 기본 설정</h4>\n<p>먼저 <code class=\"language-text\">main.dart</code>에서 <strong>ProviderScope</strong>로 앱을 감싸자:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter/material.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'app.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runApp</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">const</span> <span class=\"token class-name\">ProviderScope</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\">// 👈 핵심! Todo 앱의 모든 상태 관리 시작점</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">//    이 안에서만 Provider 사용 가능하다</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>💡 중요!</strong> <code class=\"language-text\">ProviderScope</code> 없이는 <code class=\"language-text\">ref.watch()</code>, <code class=\"language-text\">ref.read()</code> 등을 사용할 수 없다. Todo 앱의 모든 기능이 이 ProviderScope 덕분에 작동한다!</p>\n</blockquote>\n<h4>2.2 모델 정의</h4>\n<p>Todo가 어떤 정보를 가질지 정의해보자. <code class=\"language-text\">class</code>를 선언하자.\n보다시피 Flutter가 기반으로 하는 Dart는 객체 지향 언이이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// models/todo.dart</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 고유 식별자</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 할 일 내용</span>\n  <span class=\"token keyword\">final</span> bool isDone<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 완료 여부</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>  <span class=\"token comment\">// 기본값은 미완료</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 불변성을 유지하면서 일부 값만 변경하는 메서드</span>\n  <span class=\"token class-name\">Todo</span> <span class=\"token function\">copyWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">String</span><span class=\"token operator\">?</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span> title<span class=\"token punctuation\">,</span> bool<span class=\"token operator\">?</span> isDone<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>\n      id<span class=\"token punctuation\">:</span> id <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 새 값이 없으면 기존 값 사용</span>\n      title<span class=\"token punctuation\">:</span> title <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n      isDone<span class=\"token punctuation\">:</span> isDone <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5><strong>왜 <code class=\"language-text\">copyWith</code>를 사용할까?</strong></h5>\n<p>Riverpod에서는 React와 마찬가지로 상태를 업데이트할 때 <strong>불변성(Immutability)</strong> 이 중요하다. 기존 객체를 직접 수정하지 않고, 새로운 객체를 만들어서 상태를 변경한다. 이렇게 해야 Riverpod이 변화를 감지하고 UI를 업데이트할 수 있다!</p>\n<p>이건 React 해봤으면 익숙할듯</p>\n<h3>3. <code class=\"language-text\">Notifier</code>로 상태관리하기</h3>\n<h4>3.1 Notifier 핵심 개념</h4>\n<p><code class=\"language-text\">Notifier</code>는 Riverpod에서 <strong>복잡한 상태 로직을 관리하는 클래스</strong>다. 단순한 값 하나만 관리하는 <code class=\"language-text\">StateProvider</code>와 달리, Notifier는:</p>\n<ul>\n<li><strong>비즈니스 로직을 캡슐화</strong>할 수 있다</li>\n<li><strong>여러 개의 메서드</strong>로 상태를 조작할 수 있다</li>\n<li><strong>상태 변화의 규칙</strong>을 명확하게 정의할 수 있다</li>\n</ul>\n<p>쉽게 말해서, Notifier는 <strong>상태의 관리자(Controller)</strong> 역할을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 예시: 간단한 카운터 Notifier</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterNotifier</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Notifier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  int <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 초기값</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> state<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 증가</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> state<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 감소</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 리셋</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>3.2 상태 업데이트 메커니즘</h4>\n<p>Notifier에서 상태를 업데이트하는 과정은 다음과 같다:</p>\n<ol>\n<li><strong>메서드 호출</strong>: UI에서 <code class=\"language-text\">notifier.add()</code>같은 메서드를 호출</li>\n<li><strong>상태 계산</strong>: Notifier 내부에서 새로운 상태를 계산</li>\n<li><strong>상태 할당</strong>: <code class=\"language-text\">state = newValue</code>로 상태를 업데이트</li>\n<li><strong>UI 자동 업데이트</strong>: 이 Provider를 구독하는 모든 Widget이 자동으로 리빌드</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 상태 업데이트 흐름 예시</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoNotifier</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Notifier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. 새로운 Todo 객체 생성</span>\n    <span class=\"token keyword\">final</span> newTodo <span class=\"token operator\">=</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>millisecondsSinceEpoch<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2. 기존 상태에 새 Todo 추가한 새 리스트 생성</span>\n    <span class=\"token keyword\">final</span> newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 3. 상태 업데이트 (이 순간 UI가 자동으로 업데이트됨!)</span>\n    state <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>3.3 TodoNotifier 구현</h4>\n<p>이제 Todo 리스트를 관리하는 <strong>완전한 비즈니스 로직</strong>을 만들어보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// providers/todo_providers.dart</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'../models/todo.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoNotifier</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Notifier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 초기 상태 - 빈 리스트로 시작</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ✅ Todo 추가 로직</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 유효성 검사</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">final</span> id <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>millisecondsSinceEpoch<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> newTodo <span class=\"token operator\">=</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 불변성을 유지하며 새 상태 생성</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 👆 이 순간 TodoList Widget이 자동으로 리빌드됨!</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ✅ Todo 완료/미완료 토글 로직</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> todo <span class=\"token keyword\">in</span> state<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span>\n          todo<span class=\"token punctuation\">.</span><span class=\"token function\">copyWith</span><span class=\"token punctuation\">(</span>isDone<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 특정 Todo만 상태 변경</span>\n        <span class=\"token keyword\">else</span>\n          todo<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 나머지는 그대로 유지</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 👆 체크박스가 자동으로 업데이트됨!</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ✅ Todo 삭제 로직</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!=</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 👆 해당 TodoItem이 화면에서 자동으로 사라짐!</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 🔍 추가 기능: 완료된 Todo 개수 계산</span>\n  int <span class=\"token keyword\">get</span> completedCount <span class=\"token operator\">=</span><span class=\"token operator\">></span> state<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> todo<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 🔍 추가 기능: 전체 완료 토글</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">toggleAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> allCompleted <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> todo<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> todo <span class=\"token keyword\">in</span> state<span class=\"token punctuation\">)</span>\n        todo<span class=\"token punctuation\">.</span><span class=\"token function\">copyWith</span><span class=\"token punctuation\">(</span>isDone<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>allCompleted<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>핵심 포인트:</strong></p>\n<ul>\n<li>⭐️ <code class=\"language-text\">build()</code>: 초기 상태를 정의 (한 번만 실행됨)</li>\n<li><code class=\"language-text\">state = newValue</code>: 상태 업데이트, 이 순간 UI가 리빌드됨</li>\n<li><strong>불변성</strong>: 기존 객체를 수정하지 않고 새 객체/리스트를 생성</li>\n<li><strong>유효성 검사</strong>: 비즈니스 로직을 Notifier에 캡슐화</li>\n</ul>\n<h4>3.4 UI 반영 과정</h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 1. 사용자가 버튼 클릭</span>\n<span class=\"token class-name\">ElevatedButton</span><span class=\"token punctuation\">(</span>\n  onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2. Notifier 메서드 호출</span>\n    ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'새 할 일'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'추가'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 3. TodoNotifier.add() 실행</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'1'</span></span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 상태 변경!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 4. TodoList Widget이 자동으로 리빌드</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 👈 새 상태를 자동으로 받음!</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListView</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n      itemCount<span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 👈 개수가 자동으로 업데이트됨!</span>\n      itemBuilder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">TodoItem</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>3.5 Provider 연결</h4>\n<p>이제 UI에서 사용할 수 있도록 Provider를 만든다:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// providers/todo_providers.dart 파일에 추가</span>\n<span class=\"token keyword\">final</span> todoListProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">NotifierProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoNotifier</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token class-name\">TodoNotifier</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// TodoNotifier 생성자를 간단히 전달</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 <code class=\"language-text\">todoListProvider</code>를 통해 어디서든 Todo 리스트에 접근할 수 있다!</p>\n<p><strong>Provider 연결의 핵심:</strong></p>\n<ul>\n<li><code class=\"language-text\">NotifierProvider&lt;Notifier클래스, 상태타입></code>: Notifier를 Provider로 등록</li>\n<li><code class=\"language-text\">TodoNotifier.new</code>: 클래스의 생성자를 전달\n이렇게 하면 어느 Widget에서든 이 Provider를 사용할 수 있다.</li>\n</ul>\n<h4>3.6 ref.watch vs ref.read 활용</h4>\n<p><strong>이 둘의 차이점을 명확히 알아야 한다!</strong></p>\n<p><strong><code class=\"language-text\">ref.watch</code> - 상태 구독 👀</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todos가 변하면 이 Widget이 다시 그려진다!</span></code></pre></div>\n<p><strong><code class=\"language-text\">ref.read</code> - 일회성 접근 🎯</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> notifier <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnotifier<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'새 할 일'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 값만 읽거나 메서드를 호출할 때 사용, Widget은 다시 그려지지 않음</span></code></pre></div>\n<p><strong>언제 뭘 사용할까?</strong></p>\n<ul>\n<li><strong><code class=\"language-text\">ref.watch</code></strong>: UI에 데이터를 표시할 때</li>\n<li><strong><code class=\"language-text\">ref.read</code></strong>: 버튼을 눌렀을 때 상태를 변경할 때</li>\n</ul>\n<p><strong>실제 사용 예시:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔍 상태 읽기 - UI가 상태 변화를 구독</span>\n    <span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> completedCount <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>completedCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Column</span><span class=\"token punctuation\">(</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'총 </span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">todos<span class=\"token punctuation\">.</span>length</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">개, 완료 </span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">completedCount</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">개'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token class-name\">ElevatedButton</span><span class=\"token punctuation\">(</span>\n          onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ✏️ 상태 변경 - 메서드 호출</span>\n            ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'새 할 일'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Todo 추가'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// 📋 Todo 리스트 표시</span>\n        <span class=\"token class-name\">Expanded</span><span class=\"token punctuation\">(</span>\n          child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ListView</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n            itemCount<span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n            itemBuilder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">final</span> todo <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListTile</span><span class=\"token punctuation\">(</span>\n                title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                leading<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Checkbox</span><span class=\"token punctuation\">(</span>\n                  value<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">,</span>\n                  onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// ✏️ 개별 Todo 상태 변경</span>\n                    ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                trailing<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IconButton</span><span class=\"token punctuation\">(</span>\n                  icon<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Icon</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Icons</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// ✏️ Todo 삭제</span>\n                    ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>⭐️ <strong>핵심:</strong> 상태 반영이 이루어져야 될 때만 <code class=\"language-text\">ref.watch</code>를 사용하자!</p>\n<h4>3.7 React useReducer와의 비교</h4>\n<p>React에서는 <code class=\"language-text\">useReducer</code>를 사용해봤다면, <code class=\"language-text\">reducer</code> 함수 내에서 상태 업데이트 로직을 구현하고, <code class=\"language-text\">dispatch</code> 함수에 action을 전달하여 실제 상태를 업데이트하는 거에 익숙할 것이다.</p>\n<br/>\n<p><strong>useReducer 사용패턴</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// reducer 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">todoReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"add\"</span><span class=\"token operator\">:</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"subtract\"</span>\n            <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todoReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// dispatch 함수를 통해 action 전달하여 상태 업데이트</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ADD_TODO\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"New Todo\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TOGGLE_TODO\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Riverpod Notifier</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> notifier <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 메서드 직접 호출 (더 직관적!)</span>\nnotifier<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'New Todo'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnotifier<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'1'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>reducer함수처럼, flutter에서 Nofitifer 내에 상태 업데이트 로직을 구현하고\n실제 상태를 업데이트하는 로직을 전달할 때는 <code class=\"language-text\">ref.watch</code> or <code class=\"language-text\">ref.read</code> 로 Notifier를 구독한 뒤 Notifier의 값(현재 상태)이나 메서드를 불러올 수 있다.</p>\n<h3>4️⃣ 애플리케이션 로직 구현</h3>\n<h4>4.1 Todo 추가 기능</h4>\n<p>메인 화면에서 새로운 Todo를 추가하는 로직:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// views/todo_page.dart</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter/material.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:todo/providers/todo_providers.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'widgets/todo_list.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerStatefulWidget</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 👈 StatefulWidget + Consumer</span>\n  <span class=\"token keyword\">const</span> <span class=\"token class-name\">TodoPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">ConsumerState</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoPage</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_TodoPageState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> _TodoPageState <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerState</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoPage</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> _controller <span class=\"token operator\">=</span> <span class=\"token class-name\">TextEditingController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">_submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> text <span class=\"token operator\">=</span> _controller<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>isNotEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 👈 Todo 추가</span>\n      _controller<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 입력 필드 비우기</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _controller<span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 메모리 누수 방지</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">(</span>\n      appBar<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AppBar</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'📋 Todo 리스트'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Column</span><span class=\"token punctuation\">(</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// 입력 부분</span>\n          <span class=\"token class-name\">Padding</span><span class=\"token punctuation\">(</span>\n            padding<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">EdgeInsets</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Row</span><span class=\"token punctuation\">(</span>\n              children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token class-name\">Expanded</span><span class=\"token punctuation\">(</span>\n                  child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TextField</span><span class=\"token punctuation\">(</span>\n                    controller<span class=\"token punctuation\">:</span> _controller<span class=\"token punctuation\">,</span>\n                    onSubmitted<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 엔터 키로도 추가 가능</span>\n                    decoration<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">InputDecoration</span><span class=\"token punctuation\">(</span>\n                      hintText<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'할 일을 입력하세요'</span></span><span class=\"token punctuation\">,</span>\n                      border<span class=\"token punctuation\">:</span> <span class=\"token class-name\">OutlineInputBorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">const</span> <span class=\"token class-name\">SizedBox</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">FilledButton</span><span class=\"token punctuation\">(</span>\n                  onPressed<span class=\"token punctuation\">:</span> _submit<span class=\"token punctuation\">,</span>\n                  child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'추가'</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// Todo 리스트</span>\n          <span class=\"token keyword\">const</span> <span class=\"token class-name\">Expanded</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      floatingActionButton<span class=\"token punctuation\">:</span> <span class=\"token class-name\">FloatingActionButton</span><span class=\"token punctuation\">(</span>\n        onPressed<span class=\"token punctuation\">:</span> _submit<span class=\"token punctuation\">,</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">Icon</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Icons</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>4.2 Todo 삭제 및 토글 기능</h4>\n<p>개별 Todo 아이템의 UI와 상호작용:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// views/widgets/todo_item.dart</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter/material.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:todo/models/todo.dart'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:todo/providers/todo_providers.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoItem</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Todo</span> todo<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token class-name\">TodoItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListTile</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// 체크박스</span>\n      leading<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Checkbox</span><span class=\"token punctuation\">(</span>\n        value<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">,</span>\n        onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 할 일 내용</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>\n        todo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n        style<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TextStyle</span><span class=\"token punctuation\">(</span>\n          decoration<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>isDone\n            <span class=\"token operator\">?</span> <span class=\"token class-name\">TextDecoration</span><span class=\"token punctuation\">.</span>lineThrough  <span class=\"token comment\">// 완료된 항목은 취소선</span>\n            <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 삭제 버튼</span>\n      trailing<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IconButton</span><span class=\"token punctuation\">(</span>\n        icon<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">Icon</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Icons</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>5.⭐️ Best Practice 정리</h2>\n<h3>5-1. Provider 네이밍 규칙</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// ✅ 좋은 예 - Provider임을 명확히 표시</span>\n<span class=\"token keyword\">final</span> userProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">Provider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> todoListProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">NotifierProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoNotifier</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ❌ 나쁜 예 - 무엇인지 알기 어려움</span>\n<span class=\"token keyword\">final</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">Provider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> <span class=\"token class-name\">NotifierProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoNotifier</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>5-2. 상태와 UI 분리</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// ✅ 좋은 예 - 비즈니스 로직을 Notifier에 캡슐화</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoNotifier</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Notifier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 유효성 검사 로직도 여기에!</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 추가 로직...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ❌ 나쁜 예 - Widget에서 직접 상태 조작</span>\n<span class=\"token class-name\">ElevatedButton</span><span class=\"token punctuation\">(</span>\n  onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 😱</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>5-3. 적절한 Provider 타입 선택</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 간단한 값일 때</span>\n<span class=\"token keyword\">final</span> counterProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">StateProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 복잡한 객체나 비즈니스 로직이 있을 때</span>\n<span class=\"token keyword\">final</span> todoListProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">NotifierProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoNotifier</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token class-name\">TodoNotifier</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 비동기 작업이 있을 때</span>\n<span class=\"token keyword\">final</span> weatherProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">FutureProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Weather</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> weatherApi<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWeather</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>5-4. 에러 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// AsyncNotifier를 사용한 에러 처리</span>\n<span class=\"token keyword\">final</span> todosProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">AsyncNotifierProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodosNotifier</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token class-name\">TodosNotifier</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// UI에서 에러 상태 처리</span>\n<span class=\"token keyword\">final</span> todosAsync <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todosProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> todosAsync<span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">TodoList</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  loading<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">CircularProgressIndicator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  error<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'오류가 발생했어요: </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">error</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>5-5. 테스트하기 쉬운 구조</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// Provider를 가짜 구현으로 교체하여 테스트</span>\n<span class=\"token function\">testWidgets</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Todo 추가 테스트'</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>tester<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> tester<span class=\"token punctuation\">.</span><span class=\"token function\">pumpWidget</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">ProviderScope</span><span class=\"token punctuation\">(</span>\n      overrides<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        todoListProvider<span class=\"token punctuation\">.</span><span class=\"token function\">overrideWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">MockTodoNotifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 테스트 로직...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>마무리 🎉</h2>\n<h3>Riverpod을 언제 사용해야 할까? 🤔</h3>\n<p>이번 Todo 앱을 만들면서 Riverpod을 사용해보니, 다음과 같은 상황에서 특히 유용하다고 느꼈다:</p>\n<p><strong>✅ Riverpod을 사용하면 좋은 경우:</strong></p>\n<ul>\n<li><strong>여러 화면에서 같은 데이터를 공유</strong>해야 할 때 (로그인 정보, 장바구니 등)</li>\n<li><strong>복잡한 비즈니스 로직</strong>이 있을 때 (Todo 추가/수정/삭제 등)</li>\n<li><strong>테스트가 중요한 프로젝트</strong>일 때 (Provider 교체로 쉬운 테스트)</li>\n<li><strong>타입 안전성</strong>이 중요할 때 (컴파일 타임 오류 검출)</li>\n</ul>\n<p><strong>❌ 굳이 Riverpod까지 필요 없는 경우:</strong></p>\n<ul>\n<li>단순한 UI 상태만 관리하는 경우 (<code class=\"language-text\">setState</code>로 충분)</li>\n<li>한 화면에서만 사용하는 데이터인 경우</li>\n<li>프로젝트 규모가 매우 작은 경우</li>\n</ul>\n<h3>큰 관점에서 배운 점 📚</h3>\n<h4>1. <strong>상태 관리의 본질</strong></h4>\n<p>Riverpod을 통해 상태 관리의 핵심은 **\"누가, 언제, 어떻게 데이터를 관리할 것인가\"**라는 것을 깨달았다. React의 상태 관리와 비슷하지만, Flutter의 Widget 생명주기와 더 자연스럽게 통합된다는 점이 인상적이었다.</p>\n<h4>2. <strong>선언적 UI의 힘</strong></h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 상태가 변하면 UI가 자동으로 업데이트됨</span>\n<span class=\"token keyword\">final</span> todos <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>todoListProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 이것만으로 끝!</span></code></pre></div>\n<p>상태가 변하면 자동으로 UI가 업데이트되는 <strong>선언적 패러다임</strong>이 얼마나 강력한지 체감했다. 개발자는 \"무엇을 보여줄 것인가\"에만 집중하면 된다.</p>\n<h4>3. <strong>불변성의 중요성</strong></h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// ❌ 기존 객체 수정</span>\nstate<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ✅ 새 객체 생성</span>\nstate <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> id <span class=\"token operator\">?</span> todo<span class=\"token punctuation\">.</span><span class=\"token function\">copyWith</span><span class=\"token punctuation\">(</span>isDone<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> todo\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>React와 마찬가지로 <strong>불변성을 유지</strong>해야 상태 변화를 정확히 감지할 수 있다는 것을 다시 한번 확인했다.</p>\n<h4>4. <strong>관심사의 분리</strong></h4>\n<ul>\n<li><strong>Model</strong>: 데이터 구조 정의 (<code class=\"language-text\">Todo</code> 클래스)</li>\n<li><strong>Notifier</strong>: 비즈니스 로직 (<code class=\"language-text\">TodoNotifier</code>)</li>\n<li><strong>Provider</strong>: 상태 제공 (<code class=\"language-text\">todoListProvider</code>)</li>\n<li><strong>Consumer</strong>: UI 렌더링 (<code class=\"language-text\">TodoList</code>, <code class=\"language-text\">TodoItem</code>)</li>\n</ul>\n<h3>React 개발자 관점에서의 Riverpod 💭</h3>\n<p>React에서 Redux나 Zustand를 사용해본 경험이 있다면, Riverpod의 접근 방식이 매우 친숙하게 느껴질 것이다:</p>\n<table>\n<thead>\n<tr>\n<th>React 생태계</th>\n<th>Flutter Riverpod</th>\n<th>공통점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">useSelector</code></td>\n<td>ref.watch()</td>\n<td>상태 구독</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">dispatch</code></td>\n<td>ref.read().method()</td>\n<td>상태 변경</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Provider</code></td>\n<td>ProviderScope</td>\n<td>상태 제공자</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useEffect</code></td>\n<td>ref.listen()</td>\n<td>부수 효과</td>\n</tr>\n</tbody>\n</table>\n<h3>결론</h3>\n<p>Riverpod은 처음에는 복잡해 보일 수 있지만, 본질적으로 React의 상태 관리와 크게 다르지 않다.</p>","frontmatter":{"title":"초심자 입장에서 Flutter Riverpod을 '잘' 사용하는 방법 (장문)","date":"September 20, 2025","description":"React에 익숙한 개발자 입장에서 투두리스트를 구현하며 Flutter의 Riverpod 사용법을 다뤄봅니다.","pointColor":"#0468d7"}},"previous":{"fields":{"slug":"/데이터베이스 - Chapter1. An Overview of Database Management/"},"frontmatter":{"title":"데이터베이스 시스템 개론 📚 – Chapter 1. Introduction of Database Systems"}},"next":null},"pageContext":{"id":"73c44f72-67a7-5c3d-a5c1-94ba77c02ae8","previousPostId":"0825bb80-7186-517e-9c8b-c4cf927e1eb9","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}