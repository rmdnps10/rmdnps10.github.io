{"version":3,"file":"component---src-pages-index-js-751685f6fbbff87d2c5a.js","mappings":"mPAYA,MAAMA,EAAYC,IAAA,IAAC,QAAEC,EAAO,YAAEC,EAAW,eAAEC,GAAgBH,EAAA,OACzDI,EAAAA,cAAA,OAAKC,UAAU,4EACbD,EAAAA,cAAA,UACEE,QAASA,IAAMH,EAAe,IAC9BE,UAAW,wBACO,KAAhBH,EACI,gCACA,2GAEP,OAGDE,EAAAA,cAAA,OAAKC,UAAU,6BACdE,EAAAA,EAAAA,GAAIN,GAASO,KAAIC,GAChBL,EAAAA,cAAA,UACEM,IAAKD,EACLH,QAASA,IAAMH,EAAeM,GAC9BJ,UAAW,wBACTH,IAAgBO,EACZ,gCACA,2GAGLA,KAGD,EAOFE,EAAWC,IAAe,IAAd,KAAEC,GAAMD,EACxB,MAAME,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KAC9CC,EAAYL,EAAKE,YAAYG,WAC/BC,EAAAA,EAAAA,GAASN,EAAKE,YAAYG,WAC1B,KACEE,EAAOP,EAAKE,YAAYK,KACxBC,EAAaR,EAAKE,YAAYM,WACpC,OACEjB,EAAAA,cAAA,OACEM,IAAKG,EAAKG,OAAOC,KACjBZ,UAAU,0IAEVD,EAAAA,cAACkB,EAAAA,KAAI,CAACC,GAAIV,EAAKG,OAAOC,KAAMO,SAAS,OACnCpB,EAAAA,cAAA,WAASC,UAAU,MAAMoB,WAAS,EAACC,SAAS,6BACzCR,GACCd,EAAAA,cAACuB,EAAAA,EAAW,CACVC,MAAOV,EACPW,IAAKf,EACLT,UAAU,6BAIdD,EAAAA,cAAA,OAAKC,UAAU,QACbD,EAAAA,cAAA,MACEC,UAAW,sDACXyB,MAAO,CAAEC,MAAOV,IAEfP,GAEHV,EAAAA,cAAA,SAAOC,UAAU,kBAAkBQ,EAAKE,YAAYiB,MAEpD5B,EAAAA,cAAA,OAAKC,UAAU,mBACZe,EAAKZ,KAAIC,GACRL,EAAAA,cAAA,UACEM,IAAKD,EACLJ,UAAU,wFAETI,MAIPL,EAAAA,cAAA,WAASC,UAAU,QACjBD,EAAAA,cAAA,KACE6B,wBAAyB,CACvBC,OAAQrB,EAAKE,YAAYoB,aAAetB,EAAKuB,SAE/CZ,SAAS,cACTnB,UAAU,8BAMhB,EAQJgC,EAAWC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OACzBlC,EAAAA,cAAA,OAAKC,UAAU,6BACZkC,EAAM/B,KAAIK,GACTT,EAAAA,cAACO,EAAQ,CAACD,IAAKG,EAAKG,OAAOC,KAAMJ,KAAMA,MAErC,EAoER,UA7DkB2B,IAAyB,IAAxB,KAAEC,EAAI,SAAEC,GAAUF,EACnC,MAAMG,EAAYF,EAAKG,KAAKC,aAAa/B,MACnCyB,EAAQE,EAAKK,kBAAkBC,MAE/B9C,EAAU,IAAI+C,IACpBT,EAAMU,SAAQpC,IACZA,EAAKE,YAAYK,KAAK6B,SAAQxC,GAAOR,EAAQiD,IAAIzC,IAAK,IAGxD,MAAM,EAACP,EAAY,EAACC,IAAkBgD,EAAAA,EAAAA,UACpC,IAAIC,gBAAgBV,EAASW,QAAQC,IAAI,QAAU,KAGrDC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAc,IAAIJ,gBAAgBV,EAASW,QAC7CnD,EACFsD,EAAYC,IAAI,MAAOvD,GAEvBsD,EAAYE,OAAO,OAErBC,OAAOC,QAAQC,aACb,CAAC,EACD,GACA,GAAGnB,EAASoB,YAAYN,EAAYO,aACrC,GACA,CAAC7D,EAAawC,EAASoB,SAAUpB,EAASW,SAE7C,MAAMW,EAAgB9D,EAClBqC,EAAM0B,QAAOpD,GAAQA,EAAKE,YAAYK,KAAK8C,SAAShE,KACpDqC,EAEJ,OAAqB,IAAjBA,EAAM4B,OAEN/D,EAAAA,cAACgE,EAAAA,EAAM,CAAC1B,SAAUA,EAAU5B,MAAO6B,GACjCvC,EAAAA,cAACiE,EAAAA,EAAG,MACJjE,EAAAA,cAAA,SAAG,8JAUPA,EAAAA,cAACgE,EAAAA,EAAM,CAAC1B,SAAUA,EAAU5B,MAAO6B,GACjCvC,EAAAA,cAACiE,EAAAA,EAAG,MACJjE,EAAAA,cAAA,KAAGC,UAAU,0CACM,KAAhBH,EAAqB,OAAS,GAAGA,KACjC8D,EAAcG,OAAO,UAExB/D,EAAAA,cAACL,EAAS,CACRE,QAASA,EACTC,YAAaA,EACbC,eAAgBA,IAElBC,EAAAA,cAACiC,EAAQ,CAACE,MAAOyB,IACV,EAMN,MAAMM,EAAOA,IAAMlE,EAAAA,cAACmE,EAAAA,EAAG,CAACzD,MAAM,M","sources":["webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { useState, useEffect } from \"react\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { GatsbyImage, getImage, StaticImage } from \"gatsby-plugin-image\"\n\n//\n//\n//\n\nconst TagFilter = ({ tagList, selectedTag, setSelectedTag }) => (\n  <div className=\"flex gap-2 mb-2 items-center bg-darkBackground rounded-lg px-2 py-4 mt-2\">\n    <button\n      onClick={() => setSelectedTag(\"\")}\n      className={`px-2 py-0.5 border-2 ${\n        selectedTag === \"\"\n          ? \"bg-white text-black font-bold\"\n          : \"border-white text-white hover:bg-[#383737] font-bold\"\n      } rounded-lg hover:scale-110 hover: transition-all`}\n    >\n      All\n    </button>\n    <div className=\"w-0.5 h-[30px] bg-white\"></div>\n    {[...tagList].map(tag => (\n      <button\n        key={tag}\n        onClick={() => setSelectedTag(tag)}\n        className={`px-2 py-0.5 border-2 ${\n          selectedTag === tag\n            ? \"bg-white text-black font-bold\"\n            : \"border-white text-white hover:bg-[#383737] font-bold\"\n        } rounded-lg hover:scale-110 hover: transition-all`}\n      >\n        {tag}\n      </button>\n    ))}\n  </div>\n)\n\n//\n//\n//\n\nconst PostCard = ({ post }) => {\n  const title = post.frontmatter.title || post.fields.slug\n  const thumbnail = post.frontmatter.thumbnail\n    ? getImage(post.frontmatter.thumbnail)\n    : null\n  const tags = post.frontmatter.tags\n  const pointColor = post.frontmatter.pointColor\n  return (\n    <div\n      key={post.fields.slug}\n      className=\"bg-darkBackground shadow-[rgba(100,_100,_111,_0.2)_0px_7px_29px_0px] rounded-lg overflow-hidden hover:scale-105 hover: transition-all \"\n    >\n      <Link to={post.fields.slug} itemProp=\"url\">\n        <article className=\"p-0\" itemScope itemType=\"http://schema.org/Article\">\n          {thumbnail && (\n            <GatsbyImage\n              image={thumbnail}\n              alt={title}\n              className=\"w-full h-60 object-cover\"\n            />\n          )}\n\n          <div className=\"px-5\">\n            <h2\n              className={`text-2xl font-bold mt-5 mb-0 border-none break-keep`}\n              style={{ color: pointColor }}\n            >\n              {title}\n            </h2>\n            <small className=\"text-[#B0B0B0]\">{post.frontmatter.date}</small>\n\n            <div className=\"flex gap-2 my-3\">\n              {tags.map(tag => (\n                <button\n                  key={tag}\n                  className=\"px-2 py-0.5 border-2 border-white rounded-lg text-white hover:bg-[#383737] font-bold\"\n                >\n                  {tag}\n                </button>\n              ))}\n            </div>\n            <section className=\"mt-2\">\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: post.frontmatter.description || post.excerpt,\n                }}\n                itemProp=\"description\"\n                className=\"text-white break-keep\"\n              />\n            </section>\n          </div>\n        </article>\n      </Link>\n    </div>\n  )\n}\n\n//\n//\n//\n\nconst PostList = ({ posts }) => (\n  <div className=\"flex flex-col gap-10 pt-4\">\n    {posts.map(post => (\n      <PostCard key={post.fields.slug} post={post} />\n    ))}\n  </div>\n)\n\n//\n//\n//\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.nodes\n\n  const tagList = new Set()\n  posts.forEach(post => {\n    post.frontmatter.tags.forEach(tag => tagList.add(tag))\n  })\n\n  const [selectedTag, setSelectedTag] = useState(\n    new URLSearchParams(location.search).get(\"tag\") || \"\"\n  )\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search)\n    if (selectedTag) {\n      queryParams.set(\"tag\", selectedTag)\n    } else {\n      queryParams.delete(\"tag\")\n    }\n    window.history.replaceState(\n      {},\n      \"\",\n      `${location.pathname}?${queryParams.toString()}`\n    )\n  }, [selectedTag, location.pathname, location.search])\n\n  const filteredPosts = selectedTag\n    ? posts.filter(post => post.frontmatter.tags.includes(selectedTag))\n    : posts\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      <p className=\"text-3xl font-bold text-white m-0 mt-5\">\n        {selectedTag === \"\" ? \"All \" : `${selectedTag} `}\n        {filteredPosts.length} Posts\n      </p>\n      <TagFilter\n        tagList={tagList}\n        selectedTag={selectedTag}\n        setSelectedTag={setSelectedTag}\n      />\n      <PostList posts={filteredPosts} />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const Head = () => <Seo title=\"🏠\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n          pointColor\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData(width: 1000, layout: CONSTRAINED)\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["TagFilter","_ref","tagList","selectedTag","setSelectedTag","React","className","onClick","_toConsumableArray","map","tag","key","PostCard","_ref2","post","title","frontmatter","fields","slug","thumbnail","getImage","tags","pointColor","Link","to","itemProp","itemScope","itemType","GatsbyImage","image","alt","style","color","date","dangerouslySetInnerHTML","__html","description","excerpt","PostList","_ref3","posts","_ref4","data","location","siteTitle","site","siteMetadata","allMarkdownRemark","nodes","Set","forEach","add","useState","URLSearchParams","search","get","useEffect","queryParams","set","delete","window","history","replaceState","pathname","toString","filteredPosts","filter","includes","length","Layout","Bio","Head","Seo"],"sourceRoot":""}